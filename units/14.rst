Unit 14 - PyGRASS Vector Access
===============================

.. warning:: Materials under construction!

PyGRASS allows directly accessing native GRASS raster and vector maps
in the sense of Python objects. This unit shows how to deal with GRASS
vector data by PyGRASS API, see :doc:`13` for raster data.

Vector data
-----------

Vector map can be treated by :pygrass-vector:`Vector` when dealing
with basic vector primitives (points, lines, boundaries, centroids) or
by :pygrass-vector:`VectorTopo` which allows accessing topological
primitives like areas or isles. See :ref:`vector-topo-section` section
for details.

Example below prints nicely format region names and their area size in
hectares.

.. code-block:: python
                
   from grass.pygrass.vector import VectorTopo
   fylke = VectorTopo('Fylke')
   fylke.open('r')
   
   for feat in fylke.viter('areas'):
       print (u'{0}: {1:.1f}ha'.format(feat.attrs['navn'].split(':', 1)[1][:-1], feat.area() / 10e4))
   
   fylke.close()

.. figure:: ../images/units/14/pygrass-shell-vector.png

   PyGRASS vector example in action.

Topology access example
-----------------------

In the following example is presented how to access vector topological
primitives directly using PyGRASS. It requires full understanding of
GRASS topological model, see :ref:`vector-topo-section` section in
:doc:`03`.

Sample script below prints for each county (vector map :map:`Fylke`
imported in :doc:`03`) number of its neighbours.

#. Vector map :map:`Fylke` is open on line :lcode:`10` by
   :pygrass-vector:`VectorTopo` and its method ``open()``.
#. Features (areas in this case) are sequentially read by ``for`` loop
   on line :lcode:`12`. Areas are interated by ``viter()`` function.
#. For each feature (ie. county) its boudaries are looped, see line
   :lcode:`14`. Each boundary has two neighbours (line :lcode:`15`): on
   the left and right side (``-1`` for no area).

.. note:: To avoid unicode error when lauching the script from GRASS
          GUI, few lines are added to a beginnging of the script, see
          lines :lcode:`3-5`.
   
.. literalinclude:: ../_static/scripts/neighbours.py
   :language: python
   :linenos:
   :emphasize-lines: 3-5, 10, 12, 14, 15

Possible output:

::

   Troms,Romsa              : 2
   Finnmark,Finnm√°rku       : 1
   Hordaland                : 4
