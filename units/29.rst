Unit 29 - GRASS and R
=====================

.. warning:: Materials under construction!


You can use R or RStudio in conjunction with GRASS GIS in two different ways: 

* run R within a GRASS GIS session
* run GRASS GIS within a R session

in both ways you have to install :param:`rgrass7` library inside a R or RStudio session

.. code-block:: R

   install.packages("rgrass7", dependencies= TRUE)

In our active GRASS GIS session start R and load :param:`rgrass7` library

.. code-block:: bash
                
   R

.. code-block:: R

   library(rgrass7)

If we are running GRASS GIS from within R (or RStudio) we need to use the
initGRASS() function to define the GRASS GIS settings, first get the full
path to GRASS GIS installation

.. code-block:: bash
                
   grass74 --config path
   
::

   /usr/lib/grass74

and later run the initGRASS() function, with the right parameters

.. code-block:: R
                
   initGRASS(gisBase='/usr/lib/grass74', gisDbase='/home/user/grassdata/',
             location='oslo-25832', mapset='PERMANENT', override=TRUE)

At this point you can use GRASS GIS functions inside R, for example
printing the list of vectors and convert Fylke vector to raster

.. code-block:: R

   execGRASS("g.list", parameters = list(type = "vector"))
   execGRASS("v.to.rast", parameters = list(input = "Fylke",
             output="fylke", use="cat", label_column="navn"))

We can read rasters into a R object, the cat parameter indicates which
raster values to be returned as factors

.. code-block:: R

   ncdata <- readRAST(c("fylke", "modis_avg"), cat=c(TRUE, FALSE))
   summary(ncdata)

::

   Object of class SpatialGridDataFrame
   Coordinates:
         min     max
   [1,] -572752 1039248
   [2,] 5539179 7836179
   Is projected: TRUE 
   proj4string :
   [+proj=utm +no_defs +zone=33 +a=6378137 +rf=298.257222101
    +towgs84=0,0,0,0,0,0,0 +to_meter=1]
   Grid attributes:
      cellcentre.offset cellsize cells.dim
   1           -572252     1000      1612
   2           5539679     1000      2297
   Data attributes:
                        fylke           modis_avg      
     (1:Nordland)          :  80964   Min.   :-11.1    
     (1:Trøndelag)         :  58662   1st Qu.: -1.7    
     (2:Troms,Romsa)       :  40760   Median :  4.2    
     (2:Finnmark,Finnmárku):  31257   Mean   :  3.4    
     (1:Hedmark)           :  27403   3rd Qu.:  8.7    
     (Other)               : 187401   Max.   : 16.1    
     NA's                  :3276317   NA's   :2450449  

It is possible to plot a boxplot of Norvegian regions with the 2017 annual
mean values of MODIS LST

.. code-block:: R

   boxplot(ncdata$modis_avg ~ ncdata$fylke, medlwd = 1)

.. figure:: ../images/units/29/boxplot.png 
   :class: large



R vs. Python
============

Python and R are both popular languages for data science. And the question which language to use (and for what purposes) has often been discussed, e.g. at `Data-Driven Science <https://medium.com/@data_driven/python-vs-r-for-data-science-and-the-winner-is-3ebb1a968197>`__ or `Dataquest <https://www.dataquest.io/blog/python-vs-r/>`__ . There, Python and R are often considered as complementing each other with R being stronger on data visualisation and statistics while Python is considered more general purpose programming language with advantages in performance. For more computational demanding processes, Python can have significant advantages, esp. if looping is involved as the following example illustrates:

.. code-block:: bash
   echo 'library("iterpc")
   it <- iterpc(10000, 2, replace=TRUE)

   for (i in getall(it)) {
       iN <- i[1]
   }' > loop.r

   echo 'import itertools

   it = itertools.combinations(range(0,10000),2)
   for i in it:                              
       iN = i[0]' > loop.py


   ./memusg Rscript loop.r

::

   memusg: peak=436312\\

.. code-block:: bash
   ./memusg python loop.py

::

   memusg: peak=5528\\

.. code-block:: bash
   time python loop.py

::

   real    0m4.516s\\
   user    0m4.506s\\
   sys     0m0.004s\\

.. code-block:: bash
   time Rscript loop.r

::

   real    0m36.733s\\
   user    0m36.084s\\
   sys     0m0.273s\\


As you can see, in the case above, R uses ~80 times more memory and takes ~9 times longer to complete the loop-test above.

For people comng from ''R'' the ''Python'' library ''pandas'' is worth exploring. It provides data organisation and methods very similar data frames in ''R''. 

Getting started with ''Python'' and ''pandas'' gets easy with the `Pandas Cheat Sheet <https://github.com/pandas-dev/pandas/blob/master/doc/cheatsheet/Pandas_Cheat_Sheet.pdf>`__ or a more general Python cheat sheet from `DataScience <http://www.datasciencefree.com/cheatsheets.html>`__.

A nice comparison between R and functions/data management offered by pandas library can be found `here <http://pandas.pydata.org/pandas-docs/stable/comparison_with_r.html>`__

For getting a basic, hands-on introduction to Python `Codeacademy <https://www.codecademy.com/catalog/language/python>`__ can be recommended as a free learning platform.
